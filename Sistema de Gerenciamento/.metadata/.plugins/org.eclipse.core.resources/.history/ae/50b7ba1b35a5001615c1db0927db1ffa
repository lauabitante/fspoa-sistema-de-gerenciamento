
public class ListaEncadeada <T> {
	
	private Node<T> primeiro = null;
	private Node<T> ultimo = null;
	private int totalDeElementos = 0;

	public void adiciona(T elemento) {

		Node<T> novo = new Node<T>(elemento);

		if(this.totalDeElementos == 0){
			this.primeiro = novo;
			this.ultimo = novo;
		} else {
			this.ultimo.setProximo(novo);
			this.ultimo = novo;
		}
		this.totalDeElementos++;
	}

	public void remove(T elemento) {

		Node<T> atual = primeiro;

		// Se o primeiro nó é o elemento
		if (atual.valor().equals(elemento)) {
			// Primeiro elemento passa a ser o próximo.
			primeiro = atual.proximo();
			this.totalDeElementos--;
		} else {
			for (int i = 0; i < this.totalDeElementos; i++) {
				// Se o próximo elemento for o desejado
				if(atual.proximo().valor().equals(elemento)) {
					// Pega o próximo elemento após o desejado
					Node<T> proximo = atual.proximo();
					// Seta como próximo do elemento atual
					atual.setProximo(proximo.proximo());
					this.totalDeElementos--;
					break;
				} else {
					// Passa para o próximo nó.
					atual = atual.proximo();
				}
			}
		}
	}

	// Retorna o tamanho da lista
	public int tamanho() {
		return totalDeElementos;
	}

	public String toString() {

		// Verificando se a Lista está vazia
		if(this.totalDeElementos == 0){
			return "[]";
		}

		StringBuilder builder = new StringBuilder("[");
		Node<T> atual = primeiro;

		// Percorrendo até o penúltimo elemento.
		for (int i = 0; i < this.totalDeElementos - 1; i++) {
			builder.append(atual.valor());
			builder.append(", ");
			atual = atual.proximo();
		}

		// último elemento
		builder.append(atual.valor());
		builder.append("]");

		return builder.toString();
	}
}
